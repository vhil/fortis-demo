<#@ template language="C#" debug="true" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>
<#
// The Item template is called for every Sitecore item elegible for code generation. TDS will execute this T4 template every time a
// template or field on a template changes in TDS. The T4 template is responsible for generating code for only the Sitecore item TDS
// passes to the template. TDS will join all created templates together to create a single file. 
//
// Version 4 of TDS only supports generating code for Sitecore Template items.

// Parameters passed to the T4 Template for code generation

//   Model: This parameter contains information about the Sitecore Item to be generated. The Model will always be a type that inherits from SitecoreItem.
#>
<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.SitecoreItem" #>
<#
// 	DefaultNamespace: The DefaultNamespace parameter contains the default namespace of the project where the generated
//					  code file resides.
#>
<#@ parameter name="DefaultNamespace" type="System.String" #>
<#
/*   The following types are used during code generation:

/// <summary>
/// Represents the SitecoreItem to be passed to the T4 template. Any object that is a SitecoreItem will inherit from this object.
/// </summary>
public class SitecoreItem
{
    /// <summary>
    /// The Sitecore item ID.
    /// </summary>
    public Guid ID { get; set; }

    /// <summary>
    /// The name of the Sitecore item. This may be different than the Display Name.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The path to the item from the Sitecore root.
    /// </summary>
    public string Path { get; set; }

    /// <summary>
    /// Any custom data associated with the item. This data can be set on the property page associated with the Sitecore item in the solution explorer.
    /// </summary>
    public string Data { get; set; }

    /// <summary>
    /// The Parent SitecoreItem in the Sitecore hierarchy.
    /// </summary>
    public SitecoreItem Parent { get; set; }

    /// <summary>
    /// The name of the template the item is based on
    /// </summary>
    public string TemplateName { get; set; }

    /// <summary>
    /// The ID of the template the item is based on
    /// </summary>
    public Guid TemplateId { get; set; }

    /// <summary>
    /// Additional sitecore fields. These fields are set on the Code Generation Property page. 
    /// The key in the dictionary is the Field name, the value is the value of the field.
    /// </summary>
    public Dictionary<string, string> SitecoreFields;

	/// <summary>
    /// The calculated Namespace for the item. Each Sitecore item above the template is represented as part of the namespace. 
    /// A new Namespace can be set at any item in the items property page. This allows the code generation namespace to be arranged differently 
    /// than the Sitecore template hierarchy.
    /// </summary>
    public string Namespace { get; set; }
}

/// <summary>
/// Represents Template specific information for code generation.
/// </summary>
public class SitecoreTemplate : SitecoreItem
{
    /// <summary>
    /// The namespace broken out into individual segments.
    /// </summary>
    public IEnumerable<string> NamespaceSegments { get; }

    /// <summary>
    /// A list of all templates this template inherits from.
    /// </summary>
    public List<SitecoreTemplate> BaseTemplates { get; set; }

    /// <summary>
    /// A list of Sitecore Fields that make up this sitecore template.
    /// </summary>
    public List<SitecoreField> Fields { get; set; }
}

/// <summary>
/// Represents Field specific information for code generation.
/// </summary>
public class SitecoreField : SitecoreItem
{
    /// <summary>
    /// The type of the field from the template editor.
    /// </summary>
    public string Type { get; set; }
}
*/			
#>
<#
SitecoreTemplate template = Model as SitecoreTemplate;

if (template == null)
{
	return string.Empty;
}


var baseTemplates = template.BaseTemplates;
var baseTemplatesRecursive = RecursiveBaseTemplateList(template);
var combinedTemplateList = new List<SitecoreTemplate>(baseTemplatesRecursive);
combinedTemplateList.Add(template);
var combinedFieldList = GetCombinedFieldList(combinedTemplateList);

#>
#region <#= template.Name #> (<#= RelativeNamespace(template) #>)

namespace <#= FullNamespace(template) #>
{
	using System;
	using System.Collections.Generic;
	using global::Fortis.Model;
	using global::Fortis.Model.Fields;
	using global::Fortis.Providers;
<#
	var isRenderingParametersTemplate = HasRenderingOptionsBase(combinedTemplateList);

	if (isRenderingParametersTemplate)
	{
#>
	using Fortis.Model.RenderingParameters;
<#
	}
#>

	/// <summary>
	/// <para>Template interface</para>
	/// <para>Template: <#= template.Name #></para>
	/// <para>ID: <#= template.ID.ToString("b").ToUpper() #></para>
	/// <para><#= template.Path #></para>
	/// </summary>
	[TemplateMapping(<#=GetTemplateIdConstant(template)#>, "<#= GetTemplateMappingType(isRenderingParametersTemplate, true) #>")]
	public partial interface <#= InterfaceItemName(template.Name) #> : <#= GetBaseTemplateInterface(isRenderingParametersTemplate) #> <#
	foreach (var baseTemplate in baseTemplates)
	{
		if (baseTemplate != null)
		{
		#>, <#= FullNamespace(baseTemplate) + "." + InterfaceItemName(baseTemplate.Name)  #><#
		}
	}
#>

	{		
<# 
		foreach(var field in template.Fields)
		{
#>
		/// <summary>
		/// <para>Template: <#= template.Name #></para><para>Field: <#= TitleCase(field.Name) #></para><para>Data type: <#= field.Type #></para>
		/// </summary>
<# if (!isRenderingParametersTemplate && IsSupportedSearchFieldType(field.Type)) { #>
		[IndexField(<#= GetIndexFieldNameConstant(template, field) #>)]
<# } #>
		<#= GetFieldWrapperTypeInterface(field.Type) #> <#= TitleCase(field.Name) #> { get; }
<# if (!isRenderingParametersTemplate && IsSupportedSearchFieldType(field.Type)) { #>

		/// <summary>
		/// <para>Template: <#= template.Name #></para><para>Field: <#= TitleCase(field.Name) #></para><para>Data type: <#= field.Type #></para>
		/// </summary>
		[IndexField(<#= GetIndexFieldNameConstant(template, field) #>)]
<# } #>
		<#= GetReturnType(GetFieldWrapperType(field.Type)) #> <#= TitleCase(field.Name) #>Value { get; }
<#
		}
#>
	}

	/// <summary>
	/// <para>Template class</para><para><#= template.Path #></para>
	/// </summary>
	[PredefinedQuery("TemplateId", ComparisonType.Equal, <#=GetTemplateIdConstant(template)#>, typeof(Guid))]
	[TemplateMapping(<#=GetTemplateIdConstant(template)#>, "<#= GetTemplateMappingType(isRenderingParametersTemplate, false) #>")]
	public partial class <#= ClassItemName(template.Name) #> : <#= GetBaseTemplateClass(isRenderingParametersTemplate) #>, <#= InterfaceItemName(template.Name) #>
	{
<# if (!isRenderingParametersTemplate) { #>
		private Item _item = null;

		public <#= ClassItemName(template.Name) #>(ISpawnProvider spawnProvider) : base(null, spawnProvider) { }

		public <#= ClassItemName(template.Name) #>(Guid id, ISpawnProvider spawnProvider) : base(id, spawnProvider) { }

		public <#= ClassItemName(template.Name) #>(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider) : base(id, lazyFields, spawnProvider) { }

<# } #>
		public <#= ClassItemName(template.Name) #>(<#= GetConstructorParameters(isRenderingParametersTemplate) #>, ISpawnProvider spawnProvider) : base(<#= GetBaseConstructorParameters(isRenderingParametersTemplate) #>, spawnProvider)
		{
<# if (!isRenderingParametersTemplate) { #>
			_item = item;
<# } #>
		}

<#	foreach(var field in combinedFieldList)
	{
#>
		/// <summary><para>Template: <#= template.Name #></para><para>Field: <#= TitleCase(field.Name) #></para><para>Data type: <#= field.Type #></para></summary>
<# if (!isRenderingParametersTemplate && IsSupportedSearchFieldType(field.Type)) { #>
		[IndexField(<#= GetIndexFieldNameConstant(field) #>)]
<# } #>
		public virtual <#= GetFieldWrapperTypeInterface(field.Type) #> <#= TitleCase(field.Name) #>
		{
<# if (isRenderingParametersTemplate) { #>
			get { return (Fortis.Model.RenderingParameters.Fields.<#= GetFieldWrapperType(field.Type) #>)GetField("<#= field.Name #>", "<#= field.Type.ToLower() #>"); }
<# } else { #>
			get { return GetField<<#= GetFieldWrapperType(field.Type) #>>(<#=GetFieldNameConstant(field)#><# if (IsSupportedSearchFieldType(field.Type)) { #>, <#= GetIndexFieldNameConstant(field) #><# } #>); }
<# } #>
		}

		/// <summary><para>Template: <#= template.Name #></para><para>Field: <#= TitleCase(field.Name) #></para><para>Data type: <#= field.Type #></para></summary>
<# if (!isRenderingParametersTemplate && IsSupportedSearchFieldType(field.Type)) { #>
		[IndexField(<#= GetIndexFieldNameConstant(field) #>)]
<# } #>
		public <#= GetReturnType(GetFieldWrapperType(field.Type)) #> <#= TitleCase(field.Name) #>Value
		{
			get { return <#= TitleCase(field.Name) #>.Value; }
		}
<#
	}
#>	
		#region <#= ClassItemName(template.Name) #> Constants 

		public static class Constants
		{
			public const string TemplateIdStr = "<#= template.ID.ToString("b").ToUpper() #>";
			public static Guid TemplateId = new Guid(TemplateIdStr);
		}

		public static class FieldNames
		{
<#foreach(var field in combinedFieldList) { #>
			public const string <#= TitleCase(field.Name) #> = "<#= field.Name #>";
<#}#>		}

		public static class IndexFieldNames
		{
<#foreach(var field in combinedFieldList) { #>
			public const string <#= TitleCase(field.Name) #> = "<#= field.Name.Replace(" ", "_").ToLowerInvariant() + GetFieldTypeSearchAffix(field.Type) #>";
<#}#>		}

		#endregion
	}
}

#endregion

<#+
private const string SitecoreSystemTemplatePath = "/sitecore/templates/System/";
private const string ClientTemplatePath = "/sitecore/templates/User Defined/";

public string GetBaseTemplateInterface(bool isRenderingParametersTemplate)
{
	return InterfaceName(GetBaseTemplateClass(isRenderingParametersTemplate));
}

public string GetBaseTemplateClass(bool isRenderingParametersTemplate)
{
	return isRenderingParametersTemplate ? "RenderingParameterWrapper" : "SitecoreItem";
}

public string GetConstructorParameters(bool isRenderingParametersTemplate)
{
	return (isRenderingParametersTemplate ? "Dictionary<string, string> " : "Item ") + GetBaseConstructorParameters(isRenderingParametersTemplate);
}

public string GetBaseConstructorParameters(bool isRenderingParametersTemplate)
{
	return isRenderingParametersTemplate ? "parameters" : "item";
}

public string GetTemplateMappingType(bool isRenderingParametersTemplate, bool isInterface)
{
	return (isInterface ? "Interface" : string.Empty) + (isRenderingParametersTemplate ? "RenderingParameter" : isInterface ? "Map" : string.Empty);
}

public string GetTemplateIdConstant(SitecoreTemplate template)
{
	return ClassItemName(template.Name) + ".Constants.TemplateIdStr";
}

public string GetFieldNameConstant(SitecoreField field)
{
	return "FieldNames." + TitleCase(field.Name);
}

public string GetFieldNameConstant(SitecoreTemplate template, SitecoreField field)
{
	return ClassItemName(template.Name) + "." + GetFieldNameConstant(field);
}

public string GetIndexFieldNameConstant(SitecoreField field)
{
	return "IndexFieldNames." + TitleCase(field.Name);
}

public string GetIndexFieldNameConstant(SitecoreTemplate template, SitecoreField field)
{
	return ClassItemName(template.Name) + "." + GetIndexFieldNameConstant(field);
}

public string GetReturnType(string fieldType)
{
	switch (fieldType)
	{
		case "BooleanFieldWrapper":
		case "IBooleanFieldWrapper":
			return "bool";
		case "DateTimeFieldWrapper":
		case "IDateTimeFieldWrapper":
			return "DateTime";
		case "ListFieldWrapper":
		case "IListFieldWrapper":
			return "IEnumerable<Guid>";
		case "IntegerFieldWrapper":
		case "IIntegerFieldWrapper":
			return "long";
		case "NumberFieldWrapper":
		case "INumberFieldWrapper":
			return "float";
		case "LinkFieldWrapper":
		case "ILinkFieldWrapper":
			return "Guid";
		default:
			return "string";
	}
}

public bool IsSupportedSearchFieldType(string typeName)
{
	switch (typeName.ToLower())
	{
		case "checkbox":
		case "date":
		case "datetime":
		case "checklist":
		case "treelist":
		case "treelist with search":
		case "treelistex":
		case "multilist":
		case "multilist with search":
		case "droplink":
		case "droptree":
		case "general link":
		case "general link with search":
		case "text":
		case "single-line text":
		case "multi-line text":
		case "rich text":
		case "number":
		case "integer":
		case "tags":
			return true;
		default:
			return false;
	}
}

public string GetFieldTypeSearchAffix(string typeName)
{
	return "";
}

public string GetFieldWrapperTypeInterface(string typeName)
{
	return "I" + GetFieldWrapperType(typeName);
}

public string GetFieldWrapperType(string typeName)
{
	var wrapperType = "FieldWrapper";
	
	switch (typeName.ToLower())
	{
		case "checkbox":
			wrapperType = "BooleanFieldWrapper";
			break;
		case "image":
			wrapperType = "ImageFieldWrapper";
			break;
		case "file":
			wrapperType = "FileFieldWrapper";
			break;
		case "date":
		case "datetime":
			wrapperType = "DateTimeFieldWrapper";
			break;
		case "checklist":
		case "treelist":
		case "treelist with search":
		case "treelistex":
		case "multilist":
		case "multilist with search":
		case "tags":
			wrapperType = "ListFieldWrapper";
			break;
		case "droplink":
		case "droptree":
			wrapperType = "LinkFieldWrapper";
			break;
		case "general link":
		case "general link with search":
			wrapperType = "GeneralLinkFieldWrapper";
			break;
		case "text":
		case "single-line text":
		case "multi-line text":
			wrapperType = "TextFieldWrapper";
			break;
		case "rich text":
			wrapperType = "RichTextFieldWrapper";
			break;
		case "number":
			wrapperType = "NumberFieldWrapper";
			break;
		case "integer":
			wrapperType = "IntegerFieldWrapper";
			break;
		default:
			wrapperType = "TextFieldWrapper";
			break;
	}

	return wrapperType;
}

public string ClassItemName(string name)
{
	return ClassName(name) + "Item";
}

public string ClassName(string name)
{
	return TitleCase(name);
}

public string InterfaceItemName(string name)
{
	return InterfaceName(name) + "Item";
}

public string InterfaceName(string name)
{
	return "I" + TitleCase(name);
}

public string TitleCase(string name)
{
	name = Regex.Replace(name, "([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))", "$1 ");
	name = CultureInfo.InvariantCulture.TextInfo.ToTitleCase(name);
	name = Regex.Replace(name, @"[^a-zA-Z0-9]", String.Empty);

	var firstChar = 0;

	if (int.TryParse(name.Substring(0, 1), out firstChar))
	{
		var numberToWord = string.Empty;

		switch(firstChar)
		{
			case 0:
				numberToWord = "Zero";
				break;
			case 1:
				numberToWord = "One";
				break;
			case 2:
				numberToWord = "Two";
				break;
			case 3:
				numberToWord = "Three";
				break;
			case 4:
				numberToWord = "Four";
				break;
			case 5:
				numberToWord = "Five";
				break;
			case 6:
				numberToWord = "Six";
				break;
			case 7:
				numberToWord = "Seven";
				break;
			case 8:
				numberToWord = "Eight";
				break;
			case 9:
				numberToWord = "Nine";
				break;
		}

		name = numberToWord + name.Remove(0, 1);
	}
	
	return name;
}

public string RelativeNamespace(SitecoreTemplate template)
{
	var relativeNamespace = string.Empty;

	if (template.Path.StartsWith(SitecoreSystemTemplatePath))
	{
		relativeNamespace = "ScSystem";
	}
	else if (template.Path.StartsWith(ClientTemplatePath))
	{
		var paths = template.Path.Replace(ClientTemplatePath, string.Empty).Split('/');

		//relativeNamespace = TitleCase(paths[0]);
		relativeNamespace = "UserDefined";
	}
	else
	{
		relativeNamespace = "Custom";
	}
	
	return relativeNamespace;
}

public string FullNamespace(SitecoreTemplate template)
{
	return DefaultNamespace + ".Templates." + RelativeNamespace(template);
}

public ICollection<SitecoreField> GetCombinedFieldList(IEnumerable<SitecoreTemplate> templates)
{
	var fields = new Dictionary<string, SitecoreField>();

	foreach (var template in templates)
	{
		foreach(var field in template.Fields)
		{
			if (!fields.ContainsKey(field.Name))
			{
				fields.Add(field.Name, field);
			}
		}
	}

	return fields.Values;
}

public IEnumerable<SitecoreTemplate> RecursiveBaseTemplateList(SitecoreTemplate template)
{
	var list = new List<SitecoreTemplate>();

	if (template == null || template.BaseTemplates == null)
	{
		return list;
	}
	
	foreach (var baseTemplate in template.BaseTemplates)
	{
		if (baseTemplate != null)
		{
			if (!list.Any(t => t.ID == baseTemplate.ID))
			{
				list.Add(baseTemplate);
			}

			foreach (var innerBaseTemplate in RecursiveBaseTemplateList(baseTemplate))
			{
				if (!list.Any(t => t.ID == innerBaseTemplate.ID))
				{
					list.Add(innerBaseTemplate);
				}
			}
		}
	}
	
	return list;
}

public bool HasRenderingOptionsBase(IEnumerable<SitecoreTemplate> templateItems)
{
	var renderingParameterTemplateId = "8CA06D6A-B353-44E8-BC31-B528C7306971".ToLower();
	return templateItems.Any(t => t.ID.ToString() == renderingParameterTemplateId);
}
#>