<#@ template language="C#" #>
<#
// The Header Template is used to generate code that goes at the top of the generated code file. This template is executed only once.
// it will typically generate #using statements or add other one time only elements to the generated file.

//Parameters passed to Template for code generation

//   Model: The ProjectHeder object contains information about the TDS project generating the code and the project where the
//          generated code will reside.
#>
<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.ProjectHeader" #>
<#
// 	DefaultNamespace: The DefaultNamespace parameter contains the default namespace of the project where the generated
//					  code file resides.
#>
<#@ parameter name="DefaultNamespace" type="System.String" #>
<#
/* The project header class:
public class ProjectHeader
{
    /// <summary>
    /// The name of the TDS project
    /// </summary>
    public string TDSProjectName { get; set; }

    /// <summary>
    /// The full path to the TDS project file
    /// </summary>
    public string TDSProjectPath { get; set; }
    
    /// <summary>
    /// The name of the target project
    /// </summary>
    public string TargetProjectName { get; set; }

    /// <summary>
    /// The full path to the target project
    /// </summary>
    public string TargetProjectPath { get; set; }

    /// <summary>
    /// The full path to the generated project file
    /// </summary>
    public string GeneratedFilePath { get; set; }

    /// <summary>
    /// Gets or sets the base namespace as set in the TDS project.
    /// </summary>
    public string BaseNamespace { get; set; }
}
*/
#>
using Sitecore.Data.Items;
using Sitecore.ContentSearch;
using Sitecore.ContentSearch.Linq.Common;

#region Sitecore Item (Extendable base class)

namespace <#=DefaultNamespace #>
{
	using System;
	using System.Collections.Generic;
	using global::Fortis.Model;
	using global::Fortis.Providers;

	/*
		To extend base Fortis.Model.ItemWrapper class and its interface, 
		create partial class SitecoreItem and partial interface ISitecoreItem
		in your model project and add required properties or methods there.
	*/
	public partial interface ISitecoreItem : IItemWrapper
	{
	}

	public partial class SitecoreItem : ItemWrapper, ISitecoreItem
	{
		public SitecoreItem(ISpawnProvider spawnProvider) 
			: base(spawnProvider)
		{
		}

		public SitecoreItem(Item item, ISpawnProvider spawnProvider) 
			: base(item, spawnProvider)
		{
		}

		public SitecoreItem(Guid id, ISpawnProvider spawnProvider) 
			: base(id, spawnProvider)
		{
		}

		public SitecoreItem(Guid id, Dictionary<string, object> lazyFields, ISpawnProvider spawnProvider) 
			: base(id, lazyFields, spawnProvider)
		{
		}
	}
}

#endregion

